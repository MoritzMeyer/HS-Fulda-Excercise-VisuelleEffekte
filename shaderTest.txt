const fsPhongColor2 =
    `
     #ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    #else
    precision mediump float;
    #endif
    
    varying vec3 normalInterp;
    varying vec3 vertPos;
    
    uniform vec3 uLightColor;
    uniform vec3 uLightPosition;
    uniform vec3 uObjectColor;
    
    void main() {
        float Ka = 1.0;
        float Kd = 1.0;
        float Ks = 1.0;
        
        float shininessVal = 80.0;
        vec3 lightPos = normalize(uLightPosition);
        
        vec3 N = normalize(normalInterp);
        vec3 L = normalize(lightPos - vertPos);
        
        float lambertian = max(dot(N, L), 0.0);
        float specular = 0.0;
        
        if (lambertian > 0.0) {
            vec3 R = reflect(-L, N);
            vec3 V = normalize(-vertPos);
            
            // compter specular term
            float specAngle = max(dot(R, V), 0.0);
            specular = pow(specAngle, shininessVal);
        }
        
        gl_FragColor = vec4((Ka * uLightColor + Kd * lambertian * uLightColor + Ks * specular * uLightColor) * uObjectColor, 1.0);
    }   
    `;

const vsPhongColor2 =
    `
        attribute vec3 aPosition;
        attribute vec3 aNormal;
        uniform mat4 uProjectionMatrix;
        uniform mat4 uModelViewMatrix;
        uniform mat4 uModelMatrix;
        uniform mat4 uViewMatrix;
        uniform mat4 uNormalMatrix;
        
        varying vec3 normalInterp;
        varying vec3 vertPos;
        
        void main() {
            //mat4 modelViewMat = uViewMatrix * uModelMatrix;
            vec4 vertPos4 = uModelViewMatrix * vec4(aPosition, 1.0);
            vertPos = normalize(vec3(vertPos4) / vertPos4.w);
            //vertPos = vec3(vertPos4) / vertPos4.w;
            normalInterp = vec3(uNormalMatrix * vec4(aNormal, 0.0));
            
            gl_Position = uProjectionMatrix * vertPos4;
        }
    `;

    
const vsPhongColor =
`
    attribute vec3 aPosition;
    attribute vec3 aNormal;
    
    uniform mat4 uProjectionMatrix;
    uniform mat4 uViewMatrix;
    uniform mat4 uModelMatrix;
    uniform mat4 uNormalMatrix;
    uniform mat4 uModelViewMatrix;
    
    varying vec3 vFragPos;
    varying vec3 vNormal;
    
    void main() {
        gl_PointSize = 10.0;
        
        //vec4 vertPos = uModelMatrix * vec4(aPosition, 1.0);
        vFragPos = vec3(uModelMatrix * vec4(aPosition, 1.0));
        //vFragPos = vec3(vertPos) / vertPos.w;
        // mat4 normalMatrix = mat4(transpose(inverse(uModelMatrix)));
        vNormal = vec3(uNormalMatrix * vec4(aNormal, 0.0));
        //vNormal = mat3(transpose(inverse(uModelMatrix))) * aNormal;
        
        gl_Position = uProjectionMatrix * uViewMatrix * vec4(vFragPos, 1.0);
    }        
`;

const fsPhongColor =
    `
    #ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    #else
    precision mediump float;
    #endif
    
    varying vec3 vFragPos;
    varying vec3 vNormal;
    
    //uniform float uAmbientStrength;
    uniform vec3 uLightPosition;
    uniform vec3 uViewPosition;
    uniform vec3 uLightColor;
    uniform vec3 uObjectColor;
    
    void main() {
        // ambient
        float ambientStrength = 1.0;
        vec3 ambient = ambientStrength * uLightColor;
        
        // diffuse
        vec3 normal = normalize(vNormal);
        //vec3 normalizedFragPos = normalize(vFragPos);
        //vec3 normalizedLightPos = normalize(uLightPosition);
        vec3 lightDirection = normalize(uLightPosition - vFragPos);
        float diff = max(dot(normal, lightDirection), 0.0);
        vec3 diffuse =  diff * uLightColor;
        
        // sepcular
        float specularStrength = 0.5;
        vec3 viewDir = normalize(uViewPosition - vFragPos);
        vec3 reflectDir = reflect(-lightDirection, normal);
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), 16.0);
        vec3 specular = specularStrength * spec * uLightColor;
        
        vec3 result = (ambient + diffuse + specular) * uObjectColor;
        gl_FragColor = vec4(result, 1.0);
    }
`;


const vsGourandColor =
    `
        attribute vec3 aPosition;
        attribute vec3 aNormal;
        uniform mat4 uProjectionMatrix, uModelViewMatrix, uNormalMatrix;
        uniform vec3 uLightPosition;
        uniform vec3 uLightColor;
        varying vec3 vColor;
        
        varying vec3 normalInterp;
        varying vec3 vertPos;
        
        
        void main() {
            float Ka = 1.0;
            float Kd = 1.0;
            float Ks = 1.0;
            float shininessVal = 80.0;
            
            vec4 vertPos4 = uModelViewMatrix * vec4(aPosition, 1.0);
            vertPos = vec3(vertPos4) / vertPos4.w;
            normalInterp = vec3(uNormalMatrix * vec4(aNormal, 0.0));
            gl_Position = uProjectionMatrix * vertPos4;
            
            vec3 N = normalize(normalInterp);
            vec3 L = normalize(uLightPosition - vertPos);
            
            // Lambert's cosine law
            float lambertian = max(dot(N, L), 0.0);
            float specular = 0.0;
            if(lambertian > 0.0) {
                vec3 R = reflect(-L, N);      // Reflected light vector
                vec3 V = normalize(-vertPos); // Vector to viewer
                // Compute the specular term
                float specAngle = max(dot(R, V), 0.0);
                specular = pow(specAngle, shininessVal);
            }  
            
            vColor = vec3(Ka * uLightColor + Kd * lambertian * uLightColor + Ks * specular * uLightColor);
        }
    `;

const fsGourandColor =
    `
    #ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    #else
    precision mediump float;
    #endif
    
    uniform vec3 uObjectColor;
    varying vec3 vColor;
    void main() {
        gl_FragColor = vec4(vColor * uObjectColor, 1.0);
    }
    `;

drawWithLight
        gameObject.material.bind();
        gameObject.material.shader.setUniformMatrix4fv("uProjectionMatrix", false, camera.projectionMatrix.matrix);
        //gameObject.material.shader.setUniformMatrix4fv("uViewMatrix", false, camera.viewMatrix.matrix);
        //gameObject.material.shader.setUniformMatrix4fv("uModelMatrix", false, gameObject.transform.getWorldSpaceMatrix());

        gameObject.material.shader.setUniformMatrix4fv("uModelViewMatrix", false, gameObject.getModelViewMatrix(camera));
        let normalMatrix = mat4.create();
        mat4.invert(normalMatrix, gameObject.getModelViewMatrix(camera));
        mat4.transpose(normalMatrix, normalMatrix);
        gameObject.material.shader.setUniformMatrix4fv("uNormalMatrix", false, normalMatrix);

        light.bind(gameObject.material.shader);
        //gameObject.material.shader.setUniformMatrix4fv("uNormalMatrix", false, gameObject.getNormalMatrix());
        gameObject.draw();